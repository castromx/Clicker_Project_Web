import pytest
from fastapi.testclient import TestClient
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from database.database import Base, get_db_session
from main import app
import httpx
from fastapi_cache import FastAPICache
from fastapi_cache.backends.redis import RedisBackend
import aioredis

SQLALCHEMY_DATABASE_URL = "sqlite:///./test.db" 

engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
TestingSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

Base.metadata.create_all(bind=engine)

def override_get_db_session():
    try:
        db = TestingSessionLocal()
        yield db
    finally:
        db.close()

app.dependency_overrides[get_db_session] = override_get_db_session

@pytest.fixture(scope="module")
def client():
    redis = aioredis.from_url('redis://localhost:6379')
    FastAPICache.init(RedisBackend(redis), prefix="fastapi-cache")
    client = TestClient(app)
    yield client

@pytest.mark.asyncio
async def test_root(client):
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == 200

@pytest.mark.asyncio
async def test_create_user(client):
    user_data = {
        "username": "testuser",
        "email": "testuser@example.com",
        "hashed_password": "password123",
    }
    response = client.post("/create_user", json=user_data)
    assert response.status_code == 200
    assert response.json()["email"] == "testuser@example.com"

@pytest.mark.asyncio
async def test_get_user(client):
    response = client.get("/get_user", params={"id": 1})
    assert response.status_code == 200
    assert response.json()["email"] == "testuser@example.com"

@pytest.mark.asyncio
async def test_get_all_users(client):
    response = client.get("/get_all_users")
    assert response.status_code == 200
    assert len(response.json()) > 0


@pytest.mark.asyncio
async def test_create_clan(client):
    clan_data = {
        "name": "Test Clan",
        "description": "This is a test clan",
        "img_id": 1
    }
    response = client.post("/clans/", json=clan_data)
    assert response.status_code == 200
    assert response.json()["name"] == "Test Clan"

@pytest.mark.asyncio
async def test_upload_file(client):
    with open("test_image.png", "rb") as img:
        response = client.post("/uploadfile/", files={"file": img})
    assert response.status_code == 200
    assert "image_id" in response.json()

@pytest.mark.asyncio
async def test_read_image(client):
    response = client.get("/images/1")
    assert response.status_code == 200
    assert response.headers["content-type"] == "image/png"

@pytest.mark.asyncio
async def test_enter_in_clan(client):
    response = client.post("/enter_in_clan", json={"user_id": 1, "clan_id": 1})
    assert response.status_code == 200
    assert response.json()["user_id"] == 1
    assert response.json()["clan_id"] == 1

@pytest.mark.asyncio
async def test_leave_from_clan(client):
    response = client.delete("/leave_from_clan", params={"user_id": 1})
    assert response.status_code == 200
    assert "detail" in response.json()

@pytest.mark.asyncio
async def test_add_point_clan(client):
    response = client.post("/add_point_clan", json={"clan_id": 1})
    assert response.status_code == 200
    assert response.json()["points"] > 0

@pytest.mark.asyncio
async def test_get_leaderboard_user(client):
    response = client.get("/get_leaderboard_user")
    assert response.status_code == 200
    assert len(response.json()) > 0

@pytest.mark.asyncio
async def test_get_leaderboard_clan(client):
    response = client.get("/get_leaderboard_clan")
    assert response.status_code == 200
    assert len(response.json()) > 0

@pytest.mark.asyncio
async def test_buy_fill_char(client):
    response = client.post("/buy_fill_char_count", json={"user_id": 1})
    assert response.status_code == 200
    assert "detail" not in response.json()

@pytest.mark.asyncio
async def test_buy_charge(client):
    response = client.post("/buy_charge_count", json={"user_id": 1})
    assert response.status_code == 200
    assert "detail" not in response.json()

@pytest.mark.asyncio
async def test_buy_mine(client):
    response = client.post("/buy_mine_coint", json={"user_id": 1})
    assert response.status_code == 200
    assert "detail" not in response.json()

@pytest.mark.asyncio
async def test_get_user_achievements(client):
    response = client.get("/get_user_achivments", params={"user_id": 1})
    assert response.status_code == 200
    assert "achievements" in response.json()

@pytest.mark.asyncio
async def test_fill_charge(client):
    response = client.post("/fill_charge_count", json={"user_id": 1, "point": 10})
    assert response.status_code == 200
    assert response.json()["fill"] == "full"

@pytest.mark.asyncio
async def test_div_user_point(client):
    response = client.post("/div_point", json={"user_id": 1})
    assert response.status_code == 200
    assert response.json()["charge_count"] > 0
